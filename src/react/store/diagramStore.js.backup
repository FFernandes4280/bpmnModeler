import { create } from 'zustand';
import { generateDiagramFromInput } from '../../diagramCreator.js';

export const useDiagramStore = create((set, get) => ({
  // Configura√ß√£o do Processo
  processName: '',
  participants: '',
  hasExternalParticipants: 'N√£o',
  externalParticipants: '',
  
  // Evento Inicial
  initialEventName: '',
  initialEventType: 'Padr√£o',
  initialEventLane: '',
  
  // Elementos
  elements: [],
  
  // Estado do Diagrama
  viewer: null,
  
  // Actions para configura√ß√£o do processo
  setProcessName: (name) => set({ processName: name }),
  setParticipants: (participants) => set({ participants }),
  setHasExternalParticipants: (hasExternal) => set({ hasExternalParticipants: hasExternal }),
  setExternalParticipants: (external) => set({ externalParticipants: external }),
  
  // Actions para evento inicial
  setInitialEventName: (name) => set({ initialEventName: name }),
  setInitialEventType: (type) => set({ initialEventType: type }),
  setInitialEventLane: (lane) => set({ initialEventLane: lane }),
  
  // Actions para o viewer
  setViewer: (viewer) => set({ viewer }),
  
  // Actions para elementos
  addElement: (element) => set((state) => ({
    elements: [...state.elements, { ...element, id: Date.now() + Math.random() }]
  })),
  
  // Fun√ß√£o auxiliar para converter estrutura aninhada em flat com √≠ndices
  convertToFlatStructure: (elements) => {
    const flatElements = [];
    let currentIndex = 0;
    
    const processElement = (element, isInDivergence = false) => {
      const elementIndex = currentIndex++;
      const processed = {
        type: element.type,
        label: element.label || '',
        participant: element.participant || '',
        index: elementIndex
      };
      
      // Adiciona propriedades espec√≠ficas baseadas no tipo
      switch (element.type) {
        case 'Atividade':
          processed.name = `${element.subtype || 'Default'}_${element.label || `Atividade_${elementIndex + 1}`}`;
          processed.lane = element.participant;
          break;
          
        case 'Evento Intermediario':
          processed.name = `${element.subtype || 'Padr√£o'}_${element.label || `Evento_${elementIndex + 1}`}`;
          processed.lane = element.participant;
          break;
          
        case 'Fim':
          processed.name = `${element.subtype || 'Padr√£o'}_${element.label || `Fim_${elementIndex + 1}`}`;
          processed.lane = element.participant;
          break;
          
        case 'Gateway':
          const gatewaySubtype = element.subtype;
          const gatewayLabel = element.label || 'Conv';
          processed.type = `Gateway ${gatewaySubtype}`;
          processed.lane = element.participant;
          processed.name = `following${element.label || ''}_${element.participant || 'Gateway'}`;
          
          // Se n√£o for converg√™ncia, processar diverg√™ncias
          if (gatewayLabel !== 'Conv' && !isNaN(parseInt(gatewayLabel))) {
            const numDivergences = parseInt(gatewayLabel);
            processed.diverge = [];
            
            // Reserva espa√ßo para o gateway atual
            flatElements.push(processed);
            
            // Processa cada diverg√™ncia
            for (let divIndex = 1; divIndex <= numDivergences; divIndex++) {
              const divergenceElements = element.divergences?.[divIndex] || [];
              
              if (divergenceElements.length > 0) {
                // √çndice do primeiro elemento desta diverg√™ncia
                processed.diverge.push(currentIndex);
                
                // Processa todos os elementos desta diverg√™ncia
                divergenceElements.forEach(divEl => {
                  processElement(divEl, true);
                });
              }
            }
            
            // Retorna null pois j√° adicionamos o elemento
            return null;
          }
          break;
          
        case 'Gateway Existente':
          processed.refGateway = element.refGateway;
          processed.type = 'Gateway Existente';
          processed.originalType = 'Gateway Exclusivo'; // ou Paralelo, baseado no original
          processed.lane = element.participant;
          break;
          
        case 'Mensagem':
          processed.name = `${element.subtype || 'Envio'}_Mensagem_${elementIndex + 1}`;
          processed.direction = element.subtype || 'Envio';
          processed.lane = element.externalParticipant || '';
          break;
          
        case 'Data Object':
          processed.name = `${element.subtype || 'Envio'}_${element.label || `Data_${elementIndex + 1}`}`;
          processed.direction = element.subtype || 'Envio';
          break;
          
        default:
          processed.name = element.label || `${element.type}_${elementIndex + 1}`;
      }
      
      return processed;
    };
    
    // Processa todos os elementos principais
    elements.forEach(element => {
      const processed = processElement(element, false);
      if (processed) {
        flatElements.push(processed);
      }
    });
    
    return flatElements;
  },
  
  // Fun√ß√£o para atualizar diagrama
  updateDiagram: async (processState) => {
    const { viewer, convertToFlatStructure } = get();
    
    if (!processState || !viewer) {
      console.log('‚ö†Ô∏è Missing processState or viewer, skipping diagram update');
      return;
    }
    
    try {
      console.log('üîÑ Starting diagram update...');
      
      // Converte elementos React para formato flat do diagramCreator
      const processedElements = convertToFlatStructure(processState.elements);articipants: 'N√£o',
  externalParticipants: '',
  
  // Evento Inicial
  initialEventName: '',
  initialEventType: 'Padr√£o',
  initialEventLane: '',
  
  // Elementos
  elements: [],
  
  // Estado do Diagrama
  viewer: null,
  
  // Actions para configura√ß√£o do processo
  setProcessName: (name) => set({ processName: name }),
  setParticipants: (participants) => set({ participants }),
  setHasExternalParticipants: (hasExternal) => set({ hasExternalParticipants: hasExternal }),
  setExternalParticipants: (external) => set({ externalParticipants: external }),
  
  // Actions para evento inicial
  setInitialEventName: (name) => set({ initialEventName: name }),
  setInitialEventType: (type) => set({ initialEventType: type }),
  setInitialEventLane: (lane) => set({ initialEventLane: lane }),
  
  // Actions para o viewer
  setViewer: (viewer) => set({ viewer }),
  
  // Actions para elementos
  addElement: (element) => set((state) => ({
    elements: [...state.elements, { ...element, id: Date.now() + Math.random() }]
  })),

  // Action para adicionar elemento a uma diverg√™ncia (com suporte a aninhamento)
  addElementToDivergence: (gatewayId, divergenceIndex, newElement) => set((state) => {
    const addElementRecursively = (elements) => {
      return elements.map(el => {
        if (el.id === gatewayId && el.type === 'Gateway') {
          const updatedElement = { ...el };
          if (!updatedElement.divergences) {
            // Inicializa diverg√™ncias baseado no valor do gateway
            const gatewayValue = updatedElement.label || 'Conv';
            if (gatewayValue !== 'Conv' && !isNaN(parseInt(gatewayValue))) {
              const numDivergences = parseInt(gatewayValue);
              updatedElement.divergences = {};
              for (let i = 1; i <= numDivergences; i++) {
                updatedElement.divergences[i] = [];
              }
            } else {
              updatedElement.divergences = {};
            }
          }
          if (!updatedElement.divergences[divergenceIndex]) {
            updatedElement.divergences[divergenceIndex] = [];
          }
          
          const elementWithId = {
            ...newElement,
            id: Date.now() + Math.random() // Gerar ID √∫nico
          };
          
          updatedElement.divergences[divergenceIndex] = [
            ...updatedElement.divergences[divergenceIndex],
            elementWithId
          ];
          return updatedElement;
        } else if (el.type === 'Gateway' && el.divergences) {
          // Buscar em gateways aninhados
          const updatedElement = { ...el };
          updatedElement.divergences = {
            1: addElementRecursively(updatedElement.divergences[1] || []),
            2: addElementRecursively(updatedElement.divergences[2] || [])
          };
          return updatedElement;
        }
        return el;
      });
    };

    return {
      elements: addElementRecursively(state.elements)
    };
  }),

  // Action para atualizar elemento dentro de uma diverg√™ncia (com suporte a aninhamento)
  updateElementInDivergence: (gatewayId, divergenceIndex, elementId, updates) => set((state) => {
    const updateElementsRecursively = (elements) => {
      return elements.map(el => {
        if (el.id === gatewayId && el.type === 'Gateway' && el.divergences) {
          const updatedElement = { ...el };
          if (updatedElement.divergences[divergenceIndex]) {
            updatedElement.divergences[divergenceIndex] = updatedElement.divergences[divergenceIndex].map(divEl => {
              if (divEl.id === elementId) {
                const updatedDivEl = { ...divEl, ...updates };
                // Se est√° se tornando um Gateway, inicializa diverg√™ncias baseado no valor
                if (updates.type === 'Gateway') {
                  const gatewayValue = updates.label || 'Conv';
                  if (gatewayValue !== 'Conv' && !isNaN(parseInt(gatewayValue))) {
                    const numDivergences = parseInt(gatewayValue);
                    const divergences = {};
                    for (let i = 1; i <= numDivergences; i++) {
                      divergences[i] = [];
                    }
                    updatedDivEl.divergences = divergences;
                  }
                }
                // Se est√° atualizando o label de um gateway existente
                if (divEl.type === 'Gateway' && updates.label) {
                  const gatewayValue = updates.label;
                  if (gatewayValue !== 'Conv' && !isNaN(parseInt(gatewayValue))) {
                    const numDivergences = parseInt(gatewayValue);
                    const divergences = {};
                    for (let i = 1; i <= numDivergences; i++) {
                      divergences[i] = updatedDivEl.divergences?.[i] || [];
                    }
                    updatedDivEl.divergences = divergences;
                  } else if (gatewayValue === 'Conv') {
                    updatedDivEl.divergences = {};
                  }
                }
                return updatedDivEl;
              } else if (divEl.type === 'Gateway' && divEl.divergences) {
                // Atualizar gateways aninhados
                const nestedUpdate = { ...divEl };
                nestedUpdate.divergences = {
                  1: updateElementsRecursively(nestedUpdate.divergences[1] || []),
                  2: updateElementsRecursively(nestedUpdate.divergences[2] || [])
                };
                return nestedUpdate;
              }
              return divEl;
            });
          }
          return updatedElement;
        } else if (el.type === 'Gateway' && el.divergences) {
          // Buscar em outros gateways principais
          const updatedElement = { ...el };
          updatedElement.divergences = {
            1: updateElementsRecursively(updatedElement.divergences[1] || []),
            2: updateElementsRecursively(updatedElement.divergences[2] || [])
          };
          return updatedElement;
        }
        return el;
      });
    };

    return {
      elements: updateElementsRecursively(state.elements)
    };
  }),

  // Action para remover elemento de uma diverg√™ncia
  removeElementFromDivergence: (gatewayId, divergenceIndex, elementId) => set((state) => ({
    elements: state.elements.map(el => {
      if (el.id === gatewayId && el.type === 'Gateway') {
        const updatedElement = { ...el };
        if (updatedElement.divergences && updatedElement.divergences[divergenceIndex]) {
          updatedElement.divergences[divergenceIndex] = updatedElement.divergences[divergenceIndex].filter(divEl => divEl.id !== elementId);
        }
        return updatedElement;
      }
      return el;
    })
  })),
  
  updateElement: (id, updates) => set((state) => ({
    elements: state.elements.map(el => 
      el.id === id ? { ...el, ...updates } : el
    )
  })),
  
  removeElement: (id) => set((state) => ({
    elements: state.elements.filter(el => el.id !== id)
  })),
  
  moveElement: (id, direction) => set((state) => {
    const elements = [...state.elements];
    const index = elements.findIndex(el => el.id === id);
    if (index === -1) return state;
    
    const newIndex = direction === 'up' ? index - 1 : index + 1;
    if (newIndex < 0 || newIndex >= elements.length) return state;
    
    [elements[index], elements[newIndex]] = [elements[newIndex], elements[index]];
    return { elements };
  }),
  
  // Helpers para obter dados processados
  getParticipantsList: () => {
    const { participants } = get();
    return participants.split(',').map(p => p.trim()).filter(p => p);
  },
  
  getExternalParticipantsList: () => {
    const { hasExternalParticipants, externalParticipants } = get();
    return hasExternalParticipants === 'Sim' 
      ? externalParticipants.split(',').map(p => p.trim()).filter(p => p)
      : [];
  },
  
  getAllParticipants: () => {
    const { getParticipantsList, getExternalParticipantsList } = get();
    return [...getParticipantsList(), ...getExternalParticipantsList()];
  },
  
  // Obter gateways existentes com seus √≠ndices
  getExistingGateways: () => {
    const { elements } = get();
    return elements
      .map((el, index) => ({ ...el, index: index + 1 }))
      .filter(el => el.type === 'Gateway');
  },
  
  // Obter elemento por √≠ndice
  getElementByIndex: (index) => {
    const { elements } = get();
    return elements[index - 1] || null;
  },
  
  // Fun√ß√£o para atualizar diagrama
  updateDiagram: async (processState) => {
    const { viewer, convertToFlatStructure } = get();
    
    if (!processState || !viewer) {
      console.log('‚ö†Ô∏è Missing processState or viewer, skipping diagram update');
      return;
    }
    
    try {
      console.log('üîÑ Starting diagram update...');
      
      // Converte elementos React para formato flat do diagramCreator
      const processedElements = convertToFlatStructure(processState.elements);
      
      // Adiciona elemento inicial
      const initialElement = {
        type: 'Inicio',
        name: `${processState.initialEventType || 'Padr√£o'}_${processState.initialEventName}`,
        lane: processState.initialEventLane
      };
      
      const allElements = [initialElement, ...processedElements];
      
      // Processa participantes
      const participantsList = processState.participants
        .split(',')
        .map(p => p.trim())
        .filter(p => p);
        
      const externalParticipantsList = processState.hasExternalParticipants === 'Sim'
        ? processState.externalParticipants.split(',').map(p => p.trim()).filter(p => p)
        : [];
      
      console.log('üîç Elements:', allElements);
      
      // Chama o diagramCreator
      const diagramXML = await generateDiagramFromInput(
        processState.processName,
        participantsList,
        processState.hasExternalParticipants,
        externalParticipantsList,
        allElements
      );
      
      // Atualiza o viewer com o novo diagrama
      await viewer.importXML(diagramXML);
      
      // Auto-ajusta o zoom para mostrar todo o diagrama
      setTimeout(() => {
        const canvas = viewer.get('canvas');
        canvas.zoom('fit-viewport', 'auto');
      }, 100);
      
      console.log('‚úÖ Diagram updated successfully!');
      
    } catch (error) {
      console.error('‚ùå Error updating diagram:', error);
    }
  }
}));